<?php

/**
 * @file
 * Defines a Domain concept for use with Drupal.
 */

use Drupal\domain\DomainInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Set all affiliates as a default value for forms.
 */
const DOMAIN_ALL_AFFILIATES = 'DOMAIN_ALL_AFFILIATES';

/**
 * Set the current domain as a default value for forms.
 */
const DOMAIN_CURRENT_DOMAIN = 'DOMAIN_CURRENT_DOMAIN';

/**
 * Implements hook_permission().
 */
function domain_permission() {
  $permissions = array(
    'administer domains' => array(
      'title' => t('Administer all domain records'),
    ),
    'create domains' => array(
      'title' => t('Create domain records'),
    ),
    'edit assigned domains' => array(
      'title' => t('Edit assigned domain records'),
    ),
  );
  return $permissions;
}

/**
 * Checks to see if a user may create a new domain record.
 */
function domain_create_access() {
  if (user_access('administer domains') || user_access('create domains')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks to see if a user may edit an existing domain record.
 */
function domain_edit_access() {
  // @TODO conditional check in the second permission.
  if (user_access('administer domains') || user_access('edit assigned domains')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks to see if a user may view an existing domain record.
 */
function domain_view_access() {
  // @TODO conditional check in the second permission.
  if (user_access('administer domains') || user_access('edit assigned domains')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns the page title for a domain record.
 *
 * @param Drupal\domain\DomainInterface $domain
 *   A domain entity.
 */
function domain_page_title(DomainInterface $domain) {
  return check_plain($domain->name->value);
}

/**
 * Entity URI callback.
 */
function domain_uri(DomainInterface $domain) {
  return array(
    'path' => 'domain/' . $domain->machine_name->value,
  );
}

/**
 * Implements hook_entity_bundle_info().
 */
function domain_entity_bundle_info() {
  $bundles['domain']['domain'] = array(
    'label' => t('Domain record'),
    'admin' => array(
      'real path' => 'admin/structure/domain',
    ),
  );
  return $bundles;
}

/**
 * Implements hook_field_extra_fields().
 */
function domain_field_extra_fields() {
  $fields = array(
    'hostname' => array(
      'label' => t('Domain'),
      'description' => t('The domain hostname.'),
      'weight' => -12,
    ),
    'name' => array(
      'label' => t('Name'),
      'description' => t('Human-readable name.'),
      'weight' => -10,
    ),
    'scheme' => array(
      'label' => t('Scheme'),
      'description' => t('The host scheme.'),
      'weight' => -8,
    ),
    'status' => array(
      'label' => t('Status'),
      'description' => t('Record status.'),
      'weight' => -6,
    ),
    'weight' => array(
      'label' => t('Weight'),
      'description' => t('Sort weight.'),
      'weight' => -4,
    ),
    'is_default' => array(
      'label' => t('Default domain'),
      'description' => t('Indicates the default domain.'),
      'weight' => -2,
    ),
  );
  $extra['domain']['domain']['form'] = $fields;
  $extra['domain']['domain']['display'] = $fields;
  $extra['domain']['domain']['display']['domain_id'] = array(
    'label' => t('Id'),
    'description' => t('The domain record id.'),
    'weight' => -14,
  );
  return $extra;
}

/**
 * Implements hook_field_info().
 */
function domain_field_info() {
  return array(
    'domain_all' => array(
      'label' => t('Domain all affiliates'),
      'description' => t('This field stores a domain all affiliates entry for an entity.'),
      'instance_settings' => array(),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'list_default',
      'field item class' => '\Drupal\number\Type\IntegerItem',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function domain_field_is_empty($item, $field) {
  if (empty($item) && (string) $item !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_presave().
 *
 * @TODO: Should this logic move to setValue() in the Type class?
 */
function domain_field_presave(EntityInterface $entity, $field, $instance, $langcode, &$items) {
  // Handle field saves from an entity_load().
  if (isset($items[0]['realm'])) {
    $values = domain_extract_field_items($items, TRUE);
    if (!empty($values)) {
      foreach ($values as  $value) {
        $data[$value] = $value;
      }
    }
  }
  // Handles saves from a form checkbox set.
  else {
    $data = $items[0];
  }
  $result = array();
  $i = 0;
  if (!empty($data[DOMAIN_ALL_AFFILIATES])) {
    $result[$i]['realm'] = 'domain_site';
    $result[$i]['gid'] = 0;
    unset($data[DOMAIN_ALL_AFFILIATES]);
    $i++;
  }
  foreach (array_filter($data) as $key => $value) {
    if ($domain = domain_machine_name_load($key, TRUE)) {
      $result[$i]['realm'] = 'domain_id';
      $result[$i]['gid'] = $domain->domain_id->value;
      $i++;
    }
  }
  // Prepare items for saving.
  $items = $result;
  // Add domain information to the entity for storage, if required.
  // This approach is much simpler than trying to find the field instance.
  $entity->domain[$field['field_name']] = $result;
}

/**
 * Returns the id of the default domain.
 *
 * @return
 *   The domain_id of the default domain or FALSE if none is set.
 */
function domain_default_id() {
  $result = entity_load_multiple_by_properties('domain', array('is_default' => 1));
  if (!empty($result)) {
    return key($result);
  }
  return FALSE;
}

/**
 * Returns the default domain.
 *
 * @return Domain
 *   The default domain or FALSE if none is set.
 */
function domain_default() {
  $result = entity_load_multiple_by_properties('domain', array('is_default' => 1));
  if (!empty($result)) {
    return current($result);
  }
  return FALSE;
}

/**
 * Loads multiple domain records.
 *
 * @param array $domain_ids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return array
 *   An array of domain entities indexed by domain_id.
 */
function domain_load_multiple(array $domain_ids = NULL, $reset = FALSE) {
  return entity_load_multiple('domain', $domain_ids, $reset);
}

/**
 * Return the domain entity matching a domain id.
 *
 * @param $domain_id
 *   The domain id.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache. Defaults to FALSE.
 *
 * @return Drupal\domain\Entity\Domain|FALSE
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_load($domain_id = NULL, $reset = FALSE) {
  return entity_load('domain', $domain_id, $reset);
}

/**
 * Return the domain entity matching a hostname.
 *
 * @param $hostname
 *   The domain hostname.
 *
 * @return Drupal\domain\Entity\Domain|FALSE
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_load_hostname($hostname) {
  $domains = entity_load_multiple_by_properties('domain', array('hostname' => $hostname));
  if (empty($domains)) {
    return FALSE;
  }
  return current($domains);
}

/**
 * Return the domain entity matching a domain machine name.
 *
 * @param $machine_name
 *   The domain's machine name.
 *
 * @return Drupal\domain\Entity\Domain|false
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_machine_name_load($machine_name) {
  $result = entity_load_multiple_by_properties('domain', array('machine_name' => $machine_name));
  return reset($result);
}

/**
 * Loads multiple domain records by machine name.
 *
 * @param array $machine_names
 *   (optional) An array of entity machine names. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return array
 *   An array of domain entities indexed by machine.
 */
function domain_machine_name_load_multiple(array $machine_names = NULL, $reset = FALSE) {
  $domains = array();
  if (!empty($machine_names)) {
    $result = entity_load_multiple_by_properties('domain', array('machine_name' => $machine_names));
  }
  else {
    $result = domain_load_multiple();
  }
  foreach ($result as $domain) {
    $domains[$domain->machine_name->value] = $domain;
  }
  return $domains;
}

/**
 * Saves a domain record.
 *
 * @param Drupal\domain\DomainInterface $domain
 *   A domain entity.
 */
function domain_save(DomainInterface $domain) {
  $domain->save();
}

/**
 * Creates a new Domain entity record with default values.
 *
 * @param $inherit
 *   Boolean flag indicating that the new domain should inherit values from the
 *   current $_SERVER request. Useful for creating domain records on install.
 *
 * @param $values
 *  An array of values to be set when the domain object is created. If the
 *  $inherit property is set to TRUE, some values may be overridden.
 *
 * @return Drupal\domain\Entity\Domain
 *   A domain entity, with preset values for the current environment.
 */
function domain_create($inherit = FALSE, array $values = array()) {
  $default = domain_default_id();
  $domains = domain_load_multiple();
  $values += array(
    'scheme' => empty($GLOBALS['is_https']) ? 'http' : 'https',
    'status' => 1,
    'weight' => count($domains) + 1,
    'is_default' => (int) empty($default),
  );
  if ($inherit) {
    $values['hostname'] = domain_hostname();
    $values['name'] = variable_get('sitename', 'Drupal');
    $values['id'] = domain_machine_name($values['hostname']);
  }
  $domain = entity_create('domain', $values);
  return $domain;
}

/**
 * Generates a unique numeric id.
 *
 * @TODO: Move this to Domain Access, which needs it?
 */
function domain_next_id() {
  $domains = domain_load_multiple();
  $max = 0;
  foreach ($domains as $domain) {
    if ($domain->domain_id > $max) {
      $max = $domain->domain_id;
    }
  }
  return $max + 1;
}

/**
 * Creates a base hostname for the current request.
 *
 * This function is used extensively in testing and domain creation, as it
 * ensures that our code is agnostic of the current server.
 *
 * @TODO: This may be replaced be Request objects at a later point.
 *
 * @return string
 *   The hostname portion of the current HTTP request, or 'localhost' if one is
 *   not set.
 */
function domain_hostname() {
  return !empty($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : 'localhost';
}

/**
 * Create a machine name for a domain record.
 *
 * @param $hostname
 *  The hostname string of the record, which should be unique.
 *
 * @return
 *  A string with dot and colon transformed to underscore.
 */
function domain_machine_name($hostname) {
  return preg_replace('/[^a-z0-9_]+/', '_', $hostname);
}

/**
 * Returns an array of required fields for a domain record.
 *
 * @return array
 *   An array of required field keys.
 */
function domain_required_fields() {
  return array('hostname', 'name', 'id', 'scheme', 'status', 'weight');
}

/**
 * @TODO: move to a method.
 */
function domain_get_uri(DomainInterface $domain) {
  return 'foo';
}

/**
 * Returns the current domain record.
 */
function domain_get_domain() {
  $domain = Drupal::service('domain.manager');
  return isset($domain->domain) ? $domain->domain : FALSE;
}

/**
 * Reads an array of field items to domain records.
 *
 * @param array $items
 *   An $items array returned from a field element.
 * @param $keys
 *   Boolean indicator that only the matching keys should be returned.
 *   If set to FALSE, a $domain entity is returned for each record except for
 *   the DOMAIN_ALL_AFFILIATES constant.
 *
 * @return array
 *   An array of domains matching the values from the form element. Note that
 *   we are translating from machine_name to numeric gid for entity access.
 */
function domain_extract_field_items(array $items, $keys = FALSE) {
  $values = array();
  foreach ($items as $key => $value) {
    if ($value['realm'] == 'domain_site') {
      $values[DOMAIN_ALL_AFFILIATES] = DOMAIN_ALL_AFFILIATES;
    }
    elseif ($domain = domain_load($value['gid'])) {
      $values[$domain->machine_name->value] = $domain;
    }
  }
  if ($keys) {
    return array_keys($values);
  }
  return $values;
}

/**
 * Generates an array for rendering the given node.
 *
 * @param Drupal\domain\DomainInterface $domain
 *   A domain entity.
 * @param $view_mode
 *   (optional) View mode, e.g., 'full', 'teaser'... Defaults to 'full.'
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to NULL which is
 *   the global content language of the current request.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function domain_view(DomainInterface $domain, $view_mode = 'full', $langcode = NULL) {
  return entity_view($domain, $view_mode, $langcode);
}

/**
 * Constructs a drupal_render() style array from an array of loaded domains.
 *
 * @param $domains
 *   An array of domains as returned by domain_load_multiple().
 * @param $view_mode
 *   (optional) View mode, e.g., 'full', 'teaser'... Defaults to 'teaser.'
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function domain_view_multiple($domains, $view_mode = 'teaser', $langcode = NULL) {
  return entity_view_multiple($domains, $view_mode, $langcode);
}

/**
 * Implements hook_entity_load().
 *
 * The $domain->path and $domain->uri properties are derived from data in the
 * {domain} table. We use the hook system to load that data to indicate that
 * the data is not native to the object.
 *
 * This action is performed in hook_entity_load(), which precedes the running
 * of hook_domain_load() and ensures that our data is present for other modules.
 */
function domain_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'domain') {
    foreach ($entities as $domain) {
      $domain->setPath();
      $domain->setUrl();
    }
  }
}

/**
 * Ensure that the scheme value has not been hacked.
 *
 * Note that Domain Access only supports HTTP and HTTPS. Other protocols will
 * be removed.
 *
 * @param $scheme
 *   The request protocol for the requested domain.
 * @param $add_suffix
 *   Boolean indicator to add the :// string or not.
 *
 * @return
 *  Either 'http' or 'https'.
 */
function domain_check_scheme($scheme, $add_suffix = FALSE) {
  if ($scheme != 'https') {
    $scheme = 'http';
  }
  $scheme .= ($add_suffix) ? '://' : '';

  return $scheme;
}

/**
 * Returns the proper scheme value for a domain, including the ://.
 *
 * Note that this function is largely a wrapper so that the signature of
 * domain_check_scheme() doesn't change from Drupal 7.
 *
 * @see domain_check_scheme().
 *
 * @param $scheme
 *   The request protocol for the requested domain.
 *
 * @return
 *   Either http:// or https://.
 */
function domain_scheme($scheme) {
  return domain_check_scheme($scheme, TRUE);
}
