<?php

/**
 * @file
 * Domain-based access control for content.
 */

use Drupal\domain\DomainManager;
use Drupal\domain\DomainInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Defines the name of the node access control field.
 */
define('DOMAIN_ACCESS_NODE_FIELD', 'field_domain_access');

/**
 * Defines the names of the user assignment field.
 */
define('DOMAIN_ACCESS_USER_FIELD', 'field_domain_user');

/**
 * Implements hook_permission().
 */
function domain_access_permission() {
  $permissions = array(
    'assign domain editors' => array(
      'title' => t('Assign editors to assigned domains'),
    ),
    // @TODO: check how this will work.
    'set domain access' => array(
      'title' => t('Set domain access status for all content'),
    ),
    'publish to any assigned domain' => array(
      'title' => t('Publish content to any assigned domain'),
    ),
    'publish from assigned domain' => array(
      'title' => t('Publish content only from assigned domain'),
    ),
    'publish from default domain' => array(
      'title' => t('Publish content only from the default domain'),
    ),
    'edit domain content' => array(
      'title' => t('Edit any content on assigned domains'),
    ),
    'delete domain content' => array(
      'title' => t('Delete any content on assigned domains'),
    ),
    'view unpublished domain content' => array(
      'title' => t('View unpublished content on assigned domains'),
    ),
  );

  // Generate standard node permissions for all applicable node types.
  foreach (node_permissions_get_configured_types() as $type => $info) {
    $permissions += domain_editor_list_permissions($type);
  }

  return $permissions;
}

/**
 * Helper function to generate standard node permission list for a given type.
 *
 * Shamelessly lifted from node_list_permissions().
 *
 * @param $type
 *   The machine-readable name of the node type.
 * @return array
 *   An array of permission names and descriptions.
 */
function domain_editor_list_permissions($type) {
  $info = entity_load('node_type', $type);
  $type = check_plain($info->type);

  // Build standard list of node permissions for this type.
  $perms = array(
    "create $type content on assigned domains" => array(
      'title' => t('%type_name: Create new content on assigned domains', array('%type_name' => $info->name)),
    ),
    "update $type content on assigned domains" => array(
      'title' => t('%type_name: Edit any content on assigned domains', array('%type_name' => $info->name)),
    ),
    "delete $type content on assigned domains" => array(
      'title' => t('%type_name: Delete any content on assigned domains', array('%type_name' => $info->name)),
    ),
  );

  return $perms;
}

/**
 * Implements hook_node_grants().
 */
function domain_access_node_grants($account, $op) {
  $grants = array();
  $active = domain_get_domain();
  if ($op == 'view') {
    $grants['domain_id'][] = $active->domain_id;
  }
  // @TODO: check user domain assignments.
  if ($op == 'update' && $account->hasPermission('edit domain content')) {
    $grants['domain_id'][] = $active->domain_id;
  }
  if ($op == 'delete' && $account->hasPermission('delete domain content')) {
    $grants['domain_id'][] = $active->domain_id;
  }

  // @TODO grants for edit/delete.
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function domain_access_node_access_records(NodeInterface $node) {
  foreach (domain_access_get_node_values($node) as $value) {
    if (isset($value['target_id']) && $domain = domain_load($value['target_id'])) {
      $grants[] = array(
        'realm' => 'domain_id',
        'gid' => $domain->domain_id,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
    }
  }
  return $grants;
}

/**
 * Sets the default value for new fields.
 */
function domain_access_default_value($entity, $field, $instance, $langcode) {
  $item = array();
  if ($active = domain_get_domain()) {
    $item[0]['target_uuid'] = $active->uuid;
  }
  return $item;
}

/**
 * Pulls the domain access values from a node entity.
 */
function domain_access_get_node_values($entity) {
  if ($entity->isNew()) {
    return array();
  }
  $values = $entity->getPropertyValues();
  return $values[DOMAIN_ACCESS_NODE_FIELD];
}

/**
 * Pulls the domain access values from a user entity.
 */
function domain_access_get_user_values($entity) {
  if ($entity->isNew()) {
    return array();
  }
  $values = $entity->getPropertyValues();
  return $values[DOMAIN_ACCESS_USER_FIELD];
}


/**
 * Implements hook_node_presave().
 *
 * Fires only if Devel Generate module is present, to assign test nodes to
 * domains.
 *
 * @TODO: should we always set default values here?
 * @TODO: pull values from the Devel Generate form.
 *
 * @param \Drupal\Core\Entity\EntityInterface stdClass $node
 *   The node entity on which the operation is to be performed.
 */
function domain_access_node_presave(EntityInterface $node) {
  $exists = \Drupal::moduleHandler()->moduleExists('devel_generate');
  if ($exists && isset($node->devel_generate)) {
    // If set by the form.
    if (isset($node->devel_generate['domain_access'])) {
      $values = array(
        DOMAIN_ACCESS_NODE_FIELD => array_keys($node->devel_generate['domain_access']),
      );
    }
    // Else set randomly.
    else {
      $domains = domain_load_multiple();
      $values = array(
        DOMAIN_ACCESS_NODE_FIELD => array_rand($domains, ceil(rand(1, count($domains)))),
      );
    }
    $node->setPropertyValues($values);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function domain_access_form_devel_generate_content_form_alter(&$form, &$form_state, $form_id) {
  // Add our element to the devel generate form.
  $form['submit']['#weight'] = 10;
  $list = domain_options_list();
  $form['domain_access'] = array(
    '#title' => t('Domains'),
    '#type' => 'select',
    '#options' => $list,
    '#weight' => 2,
    '#multiple' => TRUE,
    '#size' => count($list) > 5 ? 5 : count($list),
    '#default_value' => array(domain_get_active_id()),
  );
}
