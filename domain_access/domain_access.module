<?php

/**
 * @file
 * Domain-based access control for content.
 */

use Drupal\domain\DomainNegotiator;
use Drupal\domain\DomainInterface;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Defines the name of the node access control field.
 */
define('DOMAIN_ACCESS_NODE_FIELD', 'field_domain_access');

/**
 * Defines the names of the user assignment field.
 */
define('DOMAIN_ACCESS_USER_FIELD', 'field_domain_user');

/**
 * Implements hook_node_grants().
 */
function domain_access_node_grants(AccountInterface $account, $op) {
  $grants = array();
  $active = \Drupal::service('domain.negotiator')->getActiveDomain();

  if (empty($active)) {
    $active = \Drupal::service('domain.loader')->loadDefaultDomain();
  }

  // No domains means no permissions.
  if (empty($active)) {
    return $grants;
  }

  $id = $active->getDomainId();
  // Advanced grants for edit/delete require permissions.
  $user = \Drupal::entityManager()->getStorage('user')->load($account->id());
  $user_domains = domain_access_get_entity_values($user, DOMAIN_ACCESS_USER_FIELD);
  // Grants for view are simple. Use the active domain.
  if ($op == 'view') {
    $grants['domain_id'][] = $id;
    if ($user->hasPermission('administer domains') || ($user->hasPermission('view unpublished domain content'))) {
      if ($user->hasPermission('publish to any domain') || in_array($id, $user_domains)) {
        $grants['domain_unpublished'][] = $id;
      }
    }
  }
  // @TODO Right now, we do not account for context of the request. Should we?
  elseif ($op == 'update' && $user->hasPermission('edit domain content') && !empty($user_domains)) {
    $grants['domain_id'] = array_values($user_domains);
  }
  elseif ($op == 'delete' && $user->hasPermission('delete domain content') && !empty($user_domains)) {
    $grants['domain_id'] = array_values($user_domains);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function domain_access_node_access_records(NodeInterface $node) {
  $grants = array();
  // If their are no domains set, use the current one.
  $domains = domain_access_get_entity_values($node, DOMAIN_ACCESS_NODE_FIELD);
  if (empty($domains) && $active = \Drupal::service('domain.negotiator')->getActiveDomain()) {
    $domains[$active->id()] = $active->getDomainId();
  }
  foreach ($domains as $id => $domainId) {
    if ($domain = \Drupal::service('domain.loader')->load($id)) {
      $grants[] = array(
        'realm' => ($node->isPublished()) ? 'domain_id' : 'domain_unpublished',
        'gid' => $domain->getDomainId(),
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
    }
  }
  return $grants;
}

/**
 * Sets the default value for new fields.
 */
function domain_access_default_value(FieldableEntityInterface $entity, FieldDefinitionInterface $definition) {
  $item = array();
  if ($active = \Drupal::service('domain.negotiator')->getActiveDomain()) {
    $item[0]['target_uuid'] = $active->uuid();
  }
  return $item;
}

/**
 * Returns the Domain Access values from an entity.
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *   The entity being checked.
 * @param $field_name
 *   The name of the field storing domain access values. Default fields are
 *   defined by this module.
 *
 * @return array
 *   An array of domain id values, where the key is id() and the value is domainId().
 */
function domain_access_get_entity_values($entity, $field_name) {
  // @TODO: static cache.
  $list = array();
  // @TODO In tests, $entity is returning NULL.
  if (is_null($entity)) {
    return $list;
  }
  // Get the values of an entity.
  $values = $entity->get($field_name);
  // Must be at least one item.
  if (!empty($values)) {
    foreach ($values as $item) {
      if ($target = $item->getValue()) {
        if ($domain = \Drupal::service('domain.loader')->load($target['target_id'])) {
          $list[$domain->id()] = $domain->getDomainId();
        }
      }
    }
  }
  return $list;
}

/**
 * Implements hook_node_presave().
 *
 * Fires only if Devel Generate module is present, to assign test nodes to
 * domains.
 *
 * @TODO: should we always set default values here?
 * @TODO: pull values from the Devel Generate form.
 *
 * @param \Drupal\Core\Entity\EntityInterface stdClass $node
 *   The node entity on which the operation is to be performed.
 */
function domain_access_node_presave(EntityInterface $node) {
  $exists = \Drupal::moduleHandler()->moduleExists('devel_generate');
  if ($exists && isset($node->devel_generate)) {
    // If set by the form.
    if (isset($node->devel_generate['domain_access'])) {
      $values = array(
        DOMAIN_ACCESS_NODE_FIELD => array_keys($node->devel_generate['domain_access']),
      );
    }
    // Else set randomly.
    else {
      $domains = \Drupal::service('domain.loader')->loadMultiple();
      $values = array(
        DOMAIN_ACCESS_NODE_FIELD => array_rand($domains, ceil(rand(1, count($domains)))),
      );
    }
    $node->setPropertyValues($values);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function domain_access_form_devel_generate_content_form_alter(&$form, &$form_state, $form_id) {
  // Add our element to the devel generate form.
  $form['submit']['#weight'] = 10;
  $list = \Drupal::service('domain.loader')->loadOptionsList();
  $form['domain_access'] = array(
    '#title' => t('Domains'),
    '#type' => 'select',
    '#options' => $list,
    '#weight' => 2,
    '#multiple' => TRUE,
    '#size' => count($list) > 5 ? 5 : count($list),
    '#default_value' => array(\Drupal::service('domain.negotiator')->getActiveId()),
  );
}

/**
 * Implements hook_domain_source_alter().
 *
 * If this node is assigned to a domain other than current, rewrite the url
 * to point to the highest-weighted domain.
 *
 * This code is proof-of-concept and may be deprecated for Domain Source.
 */
function domain_access_domain_source_alter(&$source, $path, $options) {
  $node = $options['entity'];
  $list = domain_access_get_entity_values($node, DOMAIN_ACCESS_NODE_FIELD);
  // @TODO: setting to enable this rewrite, as in older versions?
  if ($list && $domains = \Drupal::service('domain.loader')->loadMultipleSorted($list)) {
    $first = current($domains);
    if ($first->id() != $options['active_domain']->id()) {
      $source = $first;
    }
  }
}

/**
 * Implements hook_domain_references_alter().
 */
function domain_access_domain_references_alter($query, $account) {
  // Restrict domains by assignment.
  if ($account->hasPermission('publish to any domain')) {
    // Do nothing.
  }
  elseif ($account->hasPermission('publish to any assigned domain')) {
    $allowed = domain_access_get_entity_values($account, DOMAIN_ACCESS_USER_FIELD);
    $query->condition('id', array_keys($allowed), 'IN');
  }
  else {
    // Remove all options.
    // @TODO: This should make the field invisible.
    $query->condition('id', '-no-match-');
  }
}

/**
 * Implements hook_node_access().
 */
function domain_access_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  $type = $node->bundle();

  switch ($op) {
    case 'create':
      return AccessResult::allowedIfHasPermission($account, 'create ' . $type . ' content');

    case 'update':
      if ($account->hasPermission('edit any ' . $type . ' content', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('edit own ' . $type . ' content', $account) && ($account->id() == $node->getOwnerId()))->cachePerPermissions()->cachePerUser()->cacheUntilEntityChanges($node);
      }

    case 'delete':
      if ($account->hasPermission('delete any ' . $type . ' content', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('delete own ' . $type . ' content', $account) && ($account->id() == $node->getOwnerId()))->cachePerPermissions()->cachePerUser()->cacheUntilEntityChanges($node);
      }

    default:
      // No opinion.
      return AccessResult::neutral();
  }
}
