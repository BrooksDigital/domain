<?php

/**
 * @file
 * Maps multiple host requests to a single domain record.
 */

use Drupal\domain\DomainInterface;
use Drupal\domain\DomainNegotiator;
use Drupal\Core\Url;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_domain_request_alter().
 *
 * The logic in this function gives us the following matches for a request to
 * foo.example.com.
 *
 *   'foo.*'
 *   '*.example.com'
 *   'foo.*.com'
 *   'foo.example.*'
 *   '*.foo.example.com'
 *   'foo.example.com.*'
 *
 * These patterns should be sufficient for most conditions.
 */
function domain_alias_domain_request_alter(DomainInterface &$domain) {
  // If an exact match has loaded, do nothing.
  if ($domain->getMatchType() == DomainNegotiator::DOMAIN_MATCH_EXACT) {
    return;
  }
  // If no exact match, then run the alias load routine.
  $hostname = $domain->getHostname();
  $alias_loader = \Drupal::service('domain_alias.loader');
  $domain_loader = \Drupal::service('domain.loader');
  /** @var \Drupal\domain_alias\Entity\DomainAlias $alias */
  if ($alias = $alias_loader->loadByHostname($hostname)) {
    /** @var \Drupal\domain\Entity\Domain $domain */
    if ($domain = $domain_loader->load($alias->getDomainId())) {
      $domain->addProperty('alias', $alias);
      $domain->setMatchType(DomainNegotiator::DOMAIN_MATCH_ALIAS);
      $redirect = $alias->getRedirect();
      if (!empty($redirect)) {
        $domain->setRedirect($redirect);
      }
    }
    // @TODO: error capture?
  }
}

/**
 * Implements hook_domain_operations().
 */
function domain_alias_domain_operations(DomainInterface $domain, AccountInterface $account) {
  $operations = [];
  // Check permissions.
  if ($account->hasPermission('view domain aliases') || $account->hasPermission('administer domain aliases')) {
    // Add aliases to the list.
    $id = $domain->id();
    $operations['domain_alias'] = array(
      'title' => t('Aliases'),
      'url' => Url::fromRoute('domain_alias.admin', array('domain' => $id)),
      'weight' => 60,
    );
  }
  return $operations;
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function domain_alias_domain_load($entities) {
  $negotiator = \Drupal::service('domain.negotiator');
  $active = $negotiator->getActiveDomain();
  // Do nothing if no domain is active.
  if (is_null($active)) {
    return;
  }
  else {
    $loader = \Drupal::service('domain_alias.loader');
    if (isset($active->alias) && $active->alias->getEnvironment() != 'default') {
      foreach ($entities as $id => $domain) {
        if ($environment_alias = $loader->loadByEnvironmentMatch($domain, $active->alias->getEnvironment())) {
          // @TODO: handle wildcard patterns.
          $pattern = $environment_alias->getPattern();
          if (substr_count($pattern, '*') < 1) {
            $domain->setHostname($pattern);
            $domain->setPath();
            $domain->setUrl();
          }
        }
      }
    }
  }
}
