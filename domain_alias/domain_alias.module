<?php

/**
 * @file
 * Maps multiple host requests to a single domain record.
 */

use Drupal\domain\DomainInterface;
use Drupal\domain\DomainNegotiator;
use Drupal\Core\Url;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_domain_request_alter().
 *
 * The logic in this function gives us the following matches for a request to
 * foo.example.com.
 *
 *   'foo.*'
 *   '*.example.com'
 *   'foo.*.com'
 *   'foo.example.*'
 *   '*.foo.example.com'
 *   'foo.example.com.*'
 *
 * These patterns should be sufficient for most conditions.
 */
function domain_alias_domain_request_alter(DomainInterface &$domain) {
  // If an exact match has loaded, do nothing.
  if ($domain->getMatchType() == DomainNegotiator::DOMAIN_MATCH_EXACT) {
    return;
  }
  // If no exact match, then run the alias load routine.
  $hostname = $domain->getHostname();
  /** @var \Drupal\domain_alias\Entity\DomainAlias $alias */
  if ($alias = \Drupal::service('domain_alias.loader')->loadByHostname($hostname)) {
    /** @var \Drupal\domain\Entity\Domain $domain */
    if ($domain = \Drupal::service('domain.loader')->load($alias->getDomainId())) {
      $domain->addProperty('alias', $alias);
      $domain->setMatchType(DomainNegotiator::DOMAIN_MATCH_ALIAS);
      $redirect = $alias->getRedirect();
      if (!empty($redirect)) {
        $domain->setRedirect($redirect);
      }
    }
    // @TODO: error capture?
  }
}

/**
 * Implements hook_domain_operations().
 */
function domain_alias_domain_operations(DomainInterface $domain, AccountInterface $account) {
  $operations = [];
  // Check permissions.
  if ($account->hasPermission('view domain aliases') || $account->hasPermission('administer domain aliases')) {
    // Add aliases to the list.
    $id = $domain->id();
    $operations['domain_alias'] = array(
      'title' => t('Aliases'),
      'url' => Url::fromRoute('domain_alias.admin', array('domain' => $id)),
      'weight' => 60,
    );
  }
  return $operations;
}

/**
 * Implements hook_domain_source_alter().
 */
function domain_alias_domain_source_alter($source, $path, $options) {
  static $active, $environment;
  $loader = \Drupal::service('domain_alias.loader');
  $negotiator = \Drupal::service('domain.negotiator');
  if (is_null($negotiator->getActiveDomain())) {
    return;
  }
  if (!isset($active)) {
    $active = $negotiator->getActiveDomain();
    if (isset($active->alias)) {
      $environment = $active->alias->getEnvironment();
    }
  }
  if (!empty($source) && $active->getMatchType() == DomainNegotiator::DOMAIN_MATCH_ALIAS) {
    if ($environment == 'default') {
      return;
    }
    elseif ($match = $loader->loadByEnvironmentMatch($source, $environment)) {
      $pattern = $match->getPattern();
      if (substr_count($pattern, '*') > 0) {
        // fancy handling.
       # kint($active);
       # kint($pattern);
      }
      else {
        // Set the pattern as the link hostname.
        $source->setHostname($pattern);
        $source->setPath();
      }
    }
  }
}

/**
 * Implements hook_domain_source_path_alter().
 */
function domain_alias_domain_source_path_alter($source, $path, $options) {
  // Our callback here does the same thing as above.
  domain_alias_domain_source_alter($source, $path, $options);
}
