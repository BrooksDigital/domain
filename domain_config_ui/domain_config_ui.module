<?php

/**
 * @file
 * Allows saving of domain specific configuration through the UI.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_preprocess_page().
 */
function domain_config_ui_preprocess_page(&$variables) {
  $content = [];
  if (!domain_config_ui_route_is_admin()) {
    return;
  }
  if (!domain_config_ui_route_is_allowed()) {
    $admin_form = domain_config_ui_admin_form('enable');
    $content = ['domain_config_ui_admin' => $admin_form];
  }
  else {
    // Add a message below the form showing the current domain.
    $form = \Drupal::formBuilder()->getForm('Drupal\domain_config_ui\Form\SwitchForm');
    if ($form['#access'] && $warning_message = domain_config_ui_save_warning_message()) {
      $admin_form = domain_config_ui_admin_form('disable');
      $content['domain_config_ui_admin'] = $admin_form;
      $content['domain_config_ui_switch_warning'] = $warning_message;
    }
    // Add domain switch form that will reload the page to top of content region.
    $content['domain_config_ui_switch'] = $form;
  }
  if ($content) {
    $variables['page']['content'] = array_merge($content, $variables['page']['content']);
  }
}

/**
 * Generates the markup for the AJAX admin action.
 *
 * @param $op
 *   An operation: either 'enable' or 'disable' are allowed.
 */
function domain_config_ui_admin_form($op) {
  $admin_form = [];
  if (\Drupal::currentUser()->hasPermission('administer domain config ui')) {
    $route = \Drupal::routeMatch()->getRouteObject();
    // Never allow this module's settings page.
    if ($route->getPath() == '/admin/config/domain/config-ui') {
      return $admin_form;
    }
    // @TODO: add a disable operation too.
    if ($route->hasDefault('_form')) {
      $form_name = $route->getDefault('_form');
      if (method_exists($form_name, 'getEditableConfigNames')) {
        $params = [
          'op' => $op,
          'route_name' => \Drupal::routeMatch()->getRouteName(),
        ];
        $title = new TranslatableMarkup('Enable domain configuration');
        if ($op == 'disable') {
          $title = new TranslatableMarkup('Disable domain configuration');
        }
        // @TODO: Make this look like a local task?
        $admin_form = [
          '#type' => 'link',
          '#url' => Url::fromRoute('domain_config_ui.inline_action', $params),
          '#title' => $title,
          '#attributes' => [
            'class' => [
              'button',

              'button--primary',
              'button--small',
            ],
          ],
          '#prefix' => '<p>',
          '#suffix' => '</p>',
          '#weight' => -10,
        ];
      }
    }
  }
  return $admin_form;
}

/**
 * Generates the markup for the domain save warning message.
 */
function domain_config_ui_save_warning_message() {
  $manager = \Drupal::service('domain_config_ui.manager');
  if ($selected_domain_id = $manager->getSelectedDomainId()) {
    $selected_domain = \Drupal::service('entity_type.manager')
      ->getStorage('domain')
      ->load($selected_domain_id);
  }
  if ($selected_language_id = $manager->getSelectedLanguageId()) {
    $selected_language = \Drupal::service('language_manager')
      ->getLanguage($selected_language_id);
  }
  $domain_label = !empty($selected_domain) ?
    new TranslatableMarkup('the @label domain',['@label' => $selected_domain->label()]) :
    new TranslatableMarkup('all domains without custom settings');

  // @TODO: Check for overrides.
  $config_factory = \Drupal::service('domain_config_ui.factory');

  $languages = \Drupal::service('language_manager')->getLanguages();
  if (count($languages) > 1) {
    $language_label = !empty($selected_language) ? $selected_language->getName() : new TranslatableMarkup('all languages without custom settings.');
  }
  else {
    $language_label = !empty($selected_language) ? $selected_language->getName() : new TranslatableMarkup('all languages.');
  }
  $message = new TranslatableMarkup('This configuration will be saved for @domain when displayed in @language', [
    '@domain' => $domain_label,
    '@language' => $language_label,
  ]);

  return [
    '#markup' => new FormattableMarkup('<div class="messages messages--warning">@message</div>', [
      '@message' => $message,
    ]),
    '#weight' => -1000,
  ];
}

/**
 * Checks if provided path should have a domain switch form on top of the page.
 *
 * @return bool
 *   TRUE if domain switch should be added. Otherwise, FALSE.
 */
function domain_config_ui_route_is_allowed() {
  $path_pages = \Drupal::config('domain_config_ui.settings')->get('path_pages');
  $path_negate = \Drupal::config('domain_config_ui.settings')->get('path_negate');
  $route = \Drupal::routeMatch()->getRouteObject();
  // Never allow this module's form to be added.
  if ($route->getPath() == '/admin/config/domain/config-ui') {
    return FALSE;
  }
  return !$path_negate === \Drupal::service('path.matcher')->matchPath($route->getPath(), $path_pages);
}

/**
 * Checks if route is admin.
 *
 * @return bool
 *   TRUE if route is admin. Otherwise, FALSE.
 */
function domain_config_ui_route_is_admin() {
  $route = \Drupal::routeMatch()->getRouteObject();
  return \Drupal::service('router.admin_context')->isAdminRoute($route);
}
