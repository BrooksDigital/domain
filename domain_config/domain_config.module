<?php

/**
 * @file
 * Allows domain specific configuration.
 */

use Drupal\domain_config\DomainFieldConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_type_alter().
 */
function domain_config_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if ($entity_type->isSubclassOf('Drupal\Core\Config\Entity\ConfigEntityInterface')) {
      if ($entity_type_id == 'block') {
        $class = 'Drupal\domain_config\Controller\DomainConfigBlockListBuilder';
      }
      elseif ($entity_type_id == 'field_config') {
        $class = 'Drupal\domain_config\Controller\DomainConfigFieldListBuilder';
        // Will be filled in dynamically, see \Drupal\field\Entity\FieldConfig::linkTemplates().
        // @TODO Core has hardcoded this logic for config translation, so we
        // have to do some handstands to generate the link.
        $entity_type->setLinkTemplate('domain-config-overview', $entity_type->getLinkTemplate('edit-form') . '/domain-config');
      }
      else {
        $class = 'Drupal\domain_config\Controller\DomainConfigEntityListBuilder';
      }
      $entity_type->setHandlerClass('domain_config_list', $class);

      if ($entity_type->hasLinkTemplate('edit-form')) {
        $entity_type->setLinkTemplate('domain-config-overview', $entity_type->getLinkTemplate('edit-form') . '/domain-config');
      }
    }
  }
}

/**
 * Implements hook_domain_config_info().
 */
function domain_config_domain_config_info(&$info) {
  $entity_manager = \Drupal::entityManager();

  // If field UI is not enabled, the base routes of the type
  // "entity.field_config.{$entity_type}_field_edit_form" are not defined.
  if (\Drupal::moduleHandler()->moduleExists('field_ui')) {
    // Add fields entity mappers to all fieldable entity types defined.
    foreach ($entity_manager->getDefinitions() as $entity_type_id => $entity_type) {
      // Make sure entity type has field UI enabled and has a base route.
      if ($entity_type->get('field_ui_base_route')) {
        $info[$entity_type_id . '_fields'] = array(
          'base_route_name' => "entity.field_config.{$entity_type_id}_field_edit_form",
          'entity_type' => 'field_config',
          'class' => '\Drupal\domain_config\DomainConfigFieldMapper',
          'base_entity_type' => $entity_type_id,
          'weight' => 10,
        );
      }
    }
  }

  // Discover configuration entities automatically.
  foreach ($entity_manager->getDefinitions() as $entity_type_id => $entity_type) {
    // Determine base path for entities automatically if provided via the
    // configuration entity.
    if (
      !$entity_type->isSubclassOf('Drupal\Core\Config\Entity\ConfigEntityInterface') ||
      !$entity_type->hasLinkTemplate('edit-form')
    ) {
      // Do not record this entity mapper if the entity type does not
      // provide a base route. We'll surely not be able to do anything with
      // it anyway. Configuration entities with a dynamic base path, such as
      // fields, need special treatment. See above.
      continue;
    }

    // Use the entity type as the plugin ID.
    $base_route_name = "entity.$entity_type_id.edit_form";
    $info[$entity_type_id] = array(
      'class' => '\Drupal\domain_config\DomainConfigEntityMapper',
      'base_route_name' => $base_route_name,
      'title' => $entity_type->getLowercaseLabel(),
      'names' => array(),
      'entity_type' => $entity_type_id,
      'weight' => 10,
    );
  }
}

/**
 * Implements hook_entity_operation().
 */
function domain_config_entity_operation(EntityInterface $entity) {
  $operations = array();
  $entity_type = $entity->getEntityType();
  if ($entity_type->isSubclassOf('Drupal\Core\Config\Entity\ConfigEntityInterface') &&
    $entity->hasLinkTemplate('domain-config-overview') &&
    \Drupal::currentUser()->hasPermission('edit domain configuration')) {

    // @see domain_config_entity_type_alter().
    if ($entity instanceof FieldConfigInterface) {
      $path = $entity->url("{$entity->getTargetEntityTypeId()}-field-edit-form") . '/domain-config';
      $url = Url::fromUri("internal:/{$path}");
    }
    else {
      $path = $entity->url("edit-form") . '/domain-config';
      $url = Url::fromUri("internal:/{$path}");
    }
    // @TODO: Routing
    $operations['domain_config']['base'] = array(
      'title' => t('Override'),
      'weight' => 50,
      'url' => $url,
    );
    // @TODO: Language aware links.
    $operations['domain_config']['test'] = array(
      'title' => t('Test'),
      'weight' => 50,
      'url' => $url,
    );
  }
  return $operations;
}

/**
 * Implements hook_config_schema_info_alter().
 */
function domain_config_config_schema_info_alter(&$definitions) {
  $map = array(
    'label' => '\Drupal\domain_config\FormElement\Textfield',
    'text' => '\Drupal\domain_config\FormElement\Textarea',
    'date_format' => '\Drupal\domain_config\FormElement\DateFormat',
    'text_format' => '\Drupal\domain_config\FormElement\TextFormat',
    'mapping' => '\Drupal\domain_config\FormElement\ListElement',
    'sequence' => '\Drupal\domain_config\FormElement\ListElement',
    'plural_label' => '\Drupal\domain_config\FormElement\PluralVariants',
  );

  // Enhance the text and date type definitions with classes to generate proper
  // form elements in ConfigTranslationFormBase. Other translatable types will
  // appear as a one line textfield.
  foreach ($definitions as $type => &$definition) {
    if (isset($map[$type]) && !isset($definition['form_element_class'])) {
      $definition['form_element_class'] = $map[$type];
    }
  }
}
