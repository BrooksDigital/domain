<?php

// $Id$

/**
 * @file
 * Domain manager configuration options.
 *
 * For this module to work correctly, you will need to follow the INSTALL.txt 
 * instructions for editing your settings.php file.
 */

/**
 * Implements hook_menu()
 *
 * @ingroup drupal
 */
function domain_conf_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'title' => t('Domain site settings'),
      'path' => 'admin/build/domain/conf',
      'access' => user_access('administer domains'),
      'type' => MENU_CALLBACK,
      'callback' => 'domain_conf_page',
      'callback arguments' => array(arg(4))      
    );    
  }
  return $items;
}

/**
 * The domain conf page callback router.
 *
 * @param $domain_id
 *  The unique identifier for this domain, taken from {domain}.
 *
 * @ingroup conf
 */
function domain_conf_page($domain_id) {
  global $_domain;
  $domain = domain_lookup($domain_id);
  if ($domain['domain_id'] > 0) {
    // Ensure we are on the proper domain.
    domain_goto($domain);
    drupal_set_title(t('!site : Domain site settings', array('!site' => $domain['sitename'])));
    return drupal_get_form('system_site_information_settings');
  }
  else if ($domain['domain_id'] == 0) {
    return drupal_get_form('domain_conf_default', $domain);
  }
  else {
    return t('Invalid domain request.');
  } 
}

/** 
 * Special configuration options for the main domain.
 *
 * @param $domain
 * The $domain object for the default domain.
 * @return
 * A $form array according to the FormsAPI, if unique configuration is possible.
 *
 * @ingroup conf
 */

function domain_conf_default($domain) {
  drupal_set_title(t('!site : Domain site settings', array('!site' => $domain['sitename'])));
  $form = array();
  // Grab any extra elements defined by other modules.
  $extra = module_invoke_all('domainconf', $domain);
  $form = array_merge($form, $extra);
  if (!empty($form)) {
    $form['domain_conf_message'] = array(
      '#type' => 'markup', 
      '#value' => t('<p>The following custom settings may be applied to the main domain.  These options are specific to the Domain module and do not have standard configuration pages.</p>'),
      '#weight' => -100,
    );      
    // Domain information, for saving.
    $form['domain_id'] = array('#type' => 'value', '#value' => $domain['domain_id']);
    // Submit functions
    $form['#submit']['domain_conf_form_submit'] = array();
    $form['#validate']['domain_conf_form_validate'] = array();      
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save domain settings'),
      '#weight' => 10
    );   
  }
  else {
    $form['domain_conf_message'] = array('#type' => 'markup', '#value' => t('There are no custom domain settings to configure.'));
  }
  return $form;
}

/**
 * Implements hook_domainlinks()
 *
 * @ingroup conf
 */
function domain_conf_domainlinks($domain) {
  $links[] = array(
    'title' => t('settings'),
    'path' => 'admin/build/domain/conf/'. $domain['domain_id']
  );
  return $links;
}

/**
 * Implements hook_form_alter()
 *
 * Since this function is only loaded at the path admin/build/domain/conf, we
 * don't have to worry about hook_form_alter() being called when not wanted.
 *
 * @ingroup conf
 */
function domain_conf_form_alter($form_id, &$form) {
  // Set a message if we are on an admin page.
  domain_conf_warning_check($form_id);
  // We use the system_site_information_settings form as a base, and add the elements we need
  // from other forms.  The default values are altered based on stored settings.
  if ($form_id == 'system_site_information_settings') {
    // Check to be certain that we are on the right form page.
    $module = arg(2);
    $action = arg(3);
    if ($module == 'domain' && $action == 'conf') {
      $domain_id = arg(4);
      $domain = domain_lookup($domain_id);  
      $data = db_result(db_query("SELECT settings FROM {domain_conf} WHERE domain_id = %d", $domain['domain_id']));
      if (!empty($data)) {
        $settings = unserialize($data);
      }
      else {
        $settings = array();
      }
      $unset = array('buttons', '#submit');
      foreach ($unset as $key) {
        unset($form[$key]);
      }
      $form['main'] = array(
        '#type' => 'fieldset',
        '#title' => t('Domain information'),
        '#collapsible' => TRUE,
        '#weight' => -10
      );    
      // Put the defaults in the fieldset
      $fields = array('site_name', 'site_mail', 'site_slogan', 'site_mission', 'site_footer', 'site_frontpage', 'anonymous', 'xcoord', 'ycoord');
      foreach ($fields as $field) {
        $form['main'][$field] = $form[$field];
        unset($form[$field]);
      }

      // Change the path for the frontpage.
      $prefix = $form['main']['site_frontpage']['#field_prefix'];
      $_path = parse_url($prefix);    
      $str = $_path['host'];
      $fix = preg_replace("/$str/", $domain['subdomain'], $prefix, 1);
      $form['main']['site_frontpage']['#field_prefix'] = $fix;
      
      // Admin theme settings
      $themes = list_themes();
      ksort($themes);
      $options[] = t('Use domain default theme');
      foreach ($themes as $key => $value) {
        $options[$key] = $key;
      }
      $form['main']['admin_theme'] = array(
        '#type' => 'select',
        '#title' => t('Administrative theme'),
        '#options' => $options,
        '#default_value' => variable_get('admin_theme', '0'),
      );        

      // Date settings: set the default timezone
      $form['date'] = array(
        '#type' => 'fieldset',
        '#title' => t('Timezone settings'),
        '#collapsible' => TRUE,
        '#weight' => -5
      );  
      $zones = _system_zonelist();    
      $form['date']['date_default_timezone'] = array(
        '#type' => 'select',
        '#title' => t('Default time zone'),
        '#default_value' => isset($settings['date_default_timezone']) ? $settings['date_default_timezone'] :variable_get('date_default_timezone', 0),
        '#options' => $zones,
        '#description' => t('Select the default site time zone.')
      );    
      // Offline notices.
      $form['offline'] = array(
        '#type' => 'fieldset',
        '#title' => t('Maintenance settings'),
        '#collapsible' => TRUE,
        '#weight' => 5
      );      
      $form['offline']['site_offline'] = array(
        '#type' => 'radios',
        '#title' => t('Site status'),
        '#default_value' => isset($settings['site_offline']) ? $settings['site_offline'] : variable_get('site_offline', 0),
        '#options' => array(t('Online'), t('Off-line')),
        '#description' => t('When set to "Online", all visitors will be able to browse your site normally. When set to "Off-line", only users with the "administer site configuration" permission will be able to access your site to perform maintenance; all other visitors will see the site off-line message configured below. Authorized users can log in during "Off-line" mode directly via the <a href="@user-login">user login</a> page.', array('@user-login' => url('user'))),
      );
    
      $form['offline']['site_offline_message'] = array(
        '#type' => 'textarea',
        '#title' => t('Site off-line message'),
        '#default_value' => isset($settings['site_offline_message']) ? $settings['site_offline_message'] : variable_get('site_offline_message', t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => $domain['sitename']))),
        '#description' => t('Message to show visitors when the site is in off-line mode.')
      );    
      
      // Site name must be edited at the domain creation screen.
      $form['main']['site_name']['#disabled'] = TRUE;
      $form['main']['site_name']['#description'] = t('The name of this web site, as entered in the <a href="!url">domain-specific settings</a>.', array('!url' => url('admin/build/domain/edit/'. $domain['domain_id'])));

      // Reset the provided form defaults, if needed
      $form['main']['site_name']['#default_value'] = $domain['sitename'];
      $form['main']['site_mail']['#default_value'] = isset($settings['site_mail']) ? $settings['site_mail'] : variable_get('site_mail', ini_get('sendmail_from'));
      $form['main']['site_slogan']['#default_value'] = isset($settings['site_slogan']) ? $settings['site_slogan'] : variable_get('site_slogan', '');    
      $form['main']['site_mission']['#default_value'] = isset($settings['site_mission']) ? $settings['site_mission'] : variable_get('site_mission', '');    
      $form['main']['site_footer']['#default_value'] = isset($settings['site_footer']) ? $settings['site_footer'] : variable_get('site_footer', '');    
      $form['main']['site_frontpage']['#default_value'] = isset($settings['site_frontpage']) ? $settings['site_frontpage'] : variable_get('site_frontpage', 'node');    
      $form['main']['anonymous']['#default_value'] = isset($settings['anonymous']) ? $settings['anonymous'] : variable_get('anonymous', t('Guest'));    
      
      // Domain information, for saving.
      $form['domain_id'] = array('#type' => 'value', '#value' => $domain['domain_id']);
      
      // Grab any extra elements defined by other modules.
      $extra = module_invoke_all('domainconf', $domain);
      $form = array_merge($form, $extra);
  
      // Submit functions
      $form['#submit']['domain_conf_form_submit'] = array();
      $form['#validate']['domain_conf_form_validate'] = array();      
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save domain settings'),
        '#weight' => 10
      );    
    }  
  }
}

/**
 * FormsAPI
 *
 * @ingroup conf
 */
function domain_conf_form_submit($form_id, $form_values) {
  // Throw away what we don't need.
  $settings = $form_values;
  $unset = array('form_token', 'form_id', 'op', 'submit');
  foreach ($unset as $key) {
    unset($settings[$key]);
  }
  // INSERT or UPDATE?
  $check = db_result(db_query("SELECT domain_id FROM {domain_conf} WHERE domain_id = %d", $form_values['domain_id']));  
  if (isset($check)) {
    $sql = "UPDATE {domain_conf} SET settings = %b WHERE domain_id = %d";
    db_query($sql, serialize($settings), $form_values['domain_id']);
  }
  else {
    $sql = "INSERT INTO {domain_conf} VALUES (%d, %b)"; 
    db_query($sql, $form_values['domain_id'], serialize($settings));
  }
  drupal_set_message(t('Domain options saved successfully.'));
}

/**
 * Sets a message to the site admin.
 *
 * If our module changes $conf settings, they may be reflected 
 * on admin pages when we don't want them to be.
 *
 * @ingroup conf
 */
function domain_conf_warning_check($form_id) {
  static $_warning;
  // If $_POST is set, we are submitting the form and should not set a message.
  if (!$_POST && empty($_warning)) {
    global $_domain;
    // Add the list of forms
    $forms = array();     
    $forms = module_invoke_all('domainwarnings');
    if (arg(2) != 'domain' && in_array($form_id, $forms)) {
      $default = domain_default();
      if ($_domain['domain_id'] != $default['domain_id']) {
        $_path = domain_get_uri($default);
        drupal_set_message(t('You are viewing #this. This form may need to be entered from <a href="!url">!domain</a>', array('#this' => $_domain['subdomain'], '!url' => $_path, '!domain' => $default['subdomain'])));
      }  
    }
    $_warning = TRUE;
  }  
}

/**
 * Implements hook_domainwarnings()
 */
function domain_conf_domainwarnings() { 
  // These are the forms for variables set by Domain Conf.
  return array(
    'system_admin_theme_settings',
    'system_date_time_settings',
    'system_site_information_settings',
    'system_site_maintenance_settings'
  );
}

/**
 * Implements hook_domaininstall()
 */
function domain_conf_domaininstall() {
  // If Domain Conf is being used, check to see that it is installed correctly.
  if (module_exists('domain_conf') && !function_exists('_domain_conf_load')) {
    drupal_set_message(t('The Domain Configuration module is not installed correctly.  Please edit your settings.php file as described in <a href="!url">INSTALL.txt</a>', array('!url' => base_path() . drupal_get_path('module', 'domain_conf') .'/INSTALL.txt')));
  }
}
