<?php

/**
 * @file
 * Defines a Domain concept for use with Drupal.
 */

use Drupal\domain\DomainInterface;
use Drupal\domain\Entity\Domain;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_bundle_info().
 */
function domain_entity_bundle_info() {
  $bundles['domain']['domain'] = array(
    'label' => t('Domain record'),
    'admin' => array(
      'real path' => 'admin/config/domain',
    ),
  );
  return $bundles;
}

/**
 * Returns the current domain record.
 */
function domain_get_domain() {
  $negotiator = \Drupal::service('domain.negotiator');
  return $negotiator->getActiveDomain();
}

/**
 * Returns the id of the current domain record.
 */
function domain_get_active_id() {
  $negotiator = \Drupal::service('domain.negotiator');
  return $negotiator->getActiveId();
}

/**
 * Generates an array for rendering the given domain.
 *
 * @param Drupal\domain\DomainInterface $domain
 *   A domain entity.
 * @param $view_mode
 *   (optional) View mode, e.g., 'full', 'teaser'... Defaults to 'full.'
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to NULL which is
 *   the global content language of the current request.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function domain_view(DomainInterface $domain, $view_mode = 'full', $langcode = NULL) {
  return entity_view($domain, $view_mode, $langcode);
}

/**
 * Constructs a drupal_render() style array from an array of loaded domains.
 *
 * @param $domains
 *   An array of domains as returned by domain_load_multiple().
 * @param $view_mode
 *   (optional) View mode, e.g., 'full', 'teaser'... Defaults to 'teaser.'
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function domain_view_multiple($domains, $view_mode = 'teaser', $langcode = NULL) {
  return entity_view_multiple($domains, $view_mode, $langcode);
}

/**
 * Implements hook_entity_load().
 *
 * The $domain->path and $domain->uri properties are derived from data in the
 * {domain} table. We use the hook system to load that data to indicate that
 * the data is not native to the object.
 *
 * This action is performed in hook_entity_load(), which precedes the running
 * of hook_domain_load() and ensures that our data is present for other modules.
 */
function domain_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'domain') {
    foreach ($entities as $domain) {
      $domain->setPath();
      $domain->setUrl();
    }
  }
}
